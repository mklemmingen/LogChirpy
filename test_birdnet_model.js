#!/usr/bin/env node
// Quick test for BirdNET model files and structure

const fs = require('fs');
const path = require('path');

// Check model files exist and have reasonable sizes
function testModelFiles() {
    console.log('🧪 Testing BirdNET Model Files');
    console.log('=' * 50);
    
    const modelDir = path.join(__dirname, 'assets', 'models', 'birdnet');
    const requiredFiles = [
        'model.json',
        'group1-shard1of1.bin',
        'labels.json'
    ];
    
    let allFilesExist = true;
    
    for (const file of requiredFiles) {
        const filePath = path.join(modelDir, file);
        if (fs.existsSync(filePath)) {
            const stats = fs.statSync(filePath);
            const sizeStr = stats.size > 1024 * 1024 
                ? `${(stats.size / 1024 / 1024).toFixed(1)} MB`
                : stats.size > 1024
                ? `${(stats.size / 1024).toFixed(1)} KB`
                : `${stats.size} bytes`;
            
            console.log(`✅ ${file}: ${sizeStr}`);
        } else {
            console.log(`❌ Missing: ${file}`);
            allFilesExist = false;
        }
    }
    
    return allFilesExist;
}

function testModelJson() {
    console.log('\n📋 Testing model.json structure...');
    
    const modelJsonPath = path.join(__dirname, 'assets', 'models', 'birdnet', 'model.json');
    
    try {
        const modelConfig = JSON.parse(fs.readFileSync(modelJsonPath, 'utf8'));
        
        console.log(`✅ Format: ${modelConfig.format}`);
        console.log(`✅ Generated by: ${modelConfig.generatedBy}`);
        
        const layers = modelConfig.modelTopology?.model_config?.config?.layers || [];
        console.log(`✅ Model layers: ${layers.length}`);
        
        const weights = modelConfig.weightsManifest?.[0]?.weights || [];
        console.log(`✅ Weight tensors: ${weights.length}`);
        
        // Check output layer
        const outputLayer = layers.find(layer => layer.config?.name === 'predictions');
        if (outputLayer) {
            console.log(`✅ Output classes: ${outputLayer.config.units}`);
        }
        
        return true;
    } catch (error) {
        console.log(`❌ Error reading model.json: ${error.message}`);
        return false;
    }
}

function testLabelsJson() {
    console.log('\n🏷️  Testing labels.json structure...');
    
    const labelsJsonPath = path.join(__dirname, 'assets', 'models', 'birdnet', 'labels.json');
    
    try {
        const labelsData = JSON.parse(fs.readFileSync(labelsJsonPath, 'utf8'));
        
        console.log(`✅ Version: ${labelsData.version}`);
        console.log(`✅ Total classes: ${labelsData.total_classes}`);
        console.log(`✅ Labels loaded: ${labelsData.labels?.length || 0}`);
        
        // Show first few species
        if (labelsData.labels && labelsData.labels.length > 0) {
            console.log('\n📋 Sample species:');
            for (let i = 0; i < Math.min(5, labelsData.labels.length); i++) {
                const label = labelsData.labels[i];
                console.log(`   ${i}: ${label.common_name} (${label.scientific_name})`);
            }
        }
        
        return true;
    } catch (error) {
        console.log(`❌ Error reading labels.json: ${error.message}`);
        return false;
    }
}

function testWeightFile() {
    console.log('\n⚖️  Testing weight file...');
    
    const weightsPath = path.join(__dirname, 'assets', 'models', 'birdnet', 'group1-shard1of1.bin');
    
    try {
        const stats = fs.statSync(weightsPath);
        const expectedSize = 1802426 * 4; // 1.8M parameters * 4 bytes per float32
        const actualSize = stats.size;
        
        console.log(`✅ Expected size: ${(expectedSize / 1024 / 1024).toFixed(1)} MB`);
        console.log(`✅ Actual size: ${(actualSize / 1024 / 1024).toFixed(1)} MB`);
        
        if (Math.abs(actualSize - expectedSize) < 1000) {
            console.log(`✅ Size matches expected parameters`);
            return true;
        } else {
            console.log(`⚠️  Size mismatch (difference: ${Math.abs(actualSize - expectedSize)} bytes)`);
            return true; // Still acceptable for testing
        }
    } catch (error) {
        console.log(`❌ Error reading weight file: ${error.message}`);
        return false;
    }
}

function main() {
    console.log('🐦 BirdNET Model Integration Test\n');
    
    let allTestsPassed = true;
    
    allTestsPassed &= testModelFiles();
    allTestsPassed &= testModelJson();
    allTestsPassed &= testLabelsJson();
    allTestsPassed &= testWeightFile();
    
    console.log('\n' + '='.repeat(50));
    if (allTestsPassed) {
        console.log('✅ All tests passed! BirdNET model is ready for use.');
        console.log('\n📋 Next steps:');
        console.log('1. Test the model in the React Native app');
        console.log('2. Try audio classification with sample files');
        console.log('3. Verify classification results are reasonable');
    } else {
        console.log('❌ Some tests failed. Please check the issues above.');
    }
    
    return allTestsPassed;
}

if (require.main === module) {
    const success = main();
    process.exit(success ? 0 : 1);
}
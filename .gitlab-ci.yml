variables:
  GIT_DEPTH: 0
  GIT_STRATEGY: clone
  
stages:
  - analyze
  - clean
  - migrate
  - verify

# Quick analysis stage to check what needs to be done
analyze-repository:
  stage: analyze
  image: alpine/git
  timeout: 10m
  script:
    - echo "=== Repository Analysis ==="
    - echo "Repository size:"
    - du -sh .git/ || echo "Size unknown"
    - echo "Total commits:"
    - git rev-list --all --count || echo "Count failed"
    - echo "Branches:"
    - git branch -r --format='%(refname:short)' | head -10
    - echo "Recent commits:"
    - git log --oneline --graph -10 || echo "Log failed"
    
    - echo "=== Checking for issues to fix ==="
    - echo "Large files (>100MB):"
    - git rev-list --objects --all | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | awk '/^blob/ {if($3 > 100*1024*1024) print $4 " (" $3/1024/1024 "MB)"}' | head -10
    
    - echo "Problematic emails:"
    - git log --format='%ae' | sort | uniq -c | grep -E "(martin\.lauterbach|mklemmingen)" || echo "None found"
    
    - echo "Problematic names:"
    - git log --format='%an' | sort | uniq -c | grep -iE "(martin|lauterbach|mklemmingen)" || echo "None found"
    
    - echo "Claude commits:"
    - git log --grep="Claude" --oneline | wc -l || echo "0"
    
    - echo "=== Analysis complete ==="
  artifacts:
    reports:
      junit: []
  allow_failure: true

# Optimized cleaning stage with progress tracking
clean-repository:
  stage: clean
  image: python:3.11-slim
  timeout: 3h
  resource_group: git-rewrite
  variables:
    PYTHONUNBUFFERED: "1"
  before_script:
    - echo "=== Setting up git-filter-repo ==="
    - apt-get update -qq && apt-get install -y -qq git wget
    - pip install git-filter-repo
    - git config --global user.email "104225647+mklemmingen@users.noreply.github.com"
    - git config --global user.name "mklemmingen"
    - git config --global init.defaultBranch main
    
    - echo "=== Pre-cleanup stats ==="
    - echo "Initial repository size: $(du -sh .git | cut -f1)"
    - echo "Initial commit count: $(git rev-list --all --count)"
  script:
    # Step 1: Remove large files first (most impactful)
    - echo "=== Step 1: Removing large files (>100MB) ==="
    - git rev-list --objects --all | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | awk '/^blob/ {if($3 > 100*1024*1024) print $4}' > large_files.txt
    - |
      if [ -s large_files.txt ]; then
        echo "Found $(wc -l < large_files.txt) large files to remove:"
        cat large_files.txt
        while IFS= read -r file; do
          echo "Removing: $file"
          git filter-repo --path "$file" --invert-paths --force
        done < large_files.txt
      else
        echo "No large files found"
      fi

    # Step 2: Remove sensitive files
    - echo "=== Step 2: Removing .env files ==="
    - git filter-repo --path-glob '**/.env' --path-glob '**/.env.*' --invert-paths --force || echo "No .env files found"

    # Step 3: Remove problematic commit
    - echo "=== Step 3: Removing specific problematic commit ==="
    - |
      git filter-repo --commit-callback '
        if commit.original_id == b"6dc08e153ae7aa2670a085104a1dbb95dd64254c":
            commit.skip()
      ' --force || echo "Commit not found or already removed"

    # Step 4: Clean commit messages (before author rewriting)
    - echo "=== Step 4: Cleaning commit messages ==="
    - |
      git filter-repo --message-callback '
        if b"Claude" in message:
            return b"Code update"
        return message
      ' --force

    # Step 5: Fix author/committer attribution
    - echo "=== Step 5: Fixing author attribution ==="
    - |
      git filter-repo --commit-callback '
        target_email = b"104225647+mklemmingen@users.noreply.github.com"
        target_name = b"mklemmingen"
        
        old_emails = [
          b"martin.lauterbach@student.reutlingen-university.de",
          b"mklemmingen",
          b"mklemmingen@gmail.com",
          b"mklemmingen@users.noreply.github.com"
        ]
        
        old_names = [
          b"mklemmingen",
          b"Martin Lauterbach",
          b"martin.lauterbach"
        ]
        
        # Fix author (primary for GitHub attribution)
        if commit.author_email in old_emails or commit.author_name in old_names:
            commit.author_name = target_name
            commit.author_email = target_email
        
        # Fix committer (for consistency)
        if commit.committer_email in old_emails or commit.committer_name in old_names:
            commit.committer_name = target_name
            commit.committer_email = target_email
      ' --force

    # Step 6: Repository optimization
    - echo "=== Step 6: Optimizing repository ==="
    - git reflog expire --expire=now --all
    - git gc --aggressive --prune=now
    - echo "Final repository size: $(du -sh .git | cut -f1)"
    - echo "Final commit count: $(git rev-list --all --count)"
    - echo "Commits by author:"
    - git shortlog -sn || echo "Shortlog failed"
    
    # Create summary
    - echo "=== Cleanup Summary ==="
    - echo "‚úÖ Large files removed"
    - echo "‚úÖ Sensitive files (.env) removed"
    - echo "‚úÖ Problematic commit removed"
    - echo "‚úÖ Claude mentions cleaned"
    - echo "‚úÖ Author attribution fixed"
    - echo "‚úÖ Repository optimized"
  artifacts:
    paths:
      - large_files.txt
    expire_in: 1 hour
  dependencies:
    - analyze-repository

# Safe migration with verification
migrate-to-github:
  stage: migrate
  image: alpine/git
  timeout: 30m
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "=== Pre-migration verification ==="
    - echo "Repository status:"
    - git status
    - echo "Recent commits:"
    - git log --oneline -5
    - echo "Author verification:"
    - git log --format='%an <%ae>' | sort | uniq -c
    
    - echo "=== Setting up GitHub remote ==="
    - git remote remove origin || true
    - git remote add github https://x-access-token:${GITHUB_TOKEN}@github.com/mklemmingen/LogChirpy.git
    
    - echo "=== Pushing to GitHub ==="
    - git checkout main || git checkout -b main
    - git push --force-with-lease github main
    - echo "‚úÖ Successfully pushed to GitHub"
    
    - echo "=== Verifying push ==="
    - sleep 5  # Allow GitHub to process
    - |
      if curl -s -H "Authorization: Bearer ${GITHUB_TOKEN}" \
           "https://api.github.com/repos/mklemmingen/LogChirpy" | jq -r '.name' | grep -q "LogChirpy"; then
        echo "‚úÖ Repository accessible on GitHub"
      else
        echo "‚ùå Repository verification failed"
        exit 1
      fi
  dependencies:
    - clean-repository
  when: manual  # Require manual approval for safety
  only:
    - main
  environment: production

# Verify GitHub attribution
verify-attribution:
  stage: verify
  image: curlimages/curl:latest
  timeout: 5m
  script:
    - echo "=== Verifying GitHub attribution ==="
    
    # Check recent commits
    - |
      echo "Recent commits:"
      curl -s -H "Authorization: Bearer ${GITHUB_TOKEN}" \
           "https://api.github.com/repos/mklemmingen/LogChirpy/commits?per_page=5" \
           | grep -E '"email"|"name"|"date"' | head -15
    
    # Check contributors
    - |
      echo "Contributors:"
      curl -s -H "Authorization: Bearer ${GITHUB_TOKEN}" \
           "https://api.github.com/repos/mklemmingen/LogChirpy/contributors" \
           | grep -E '"login"|"contributions"'
    
    # Check commit with your email
    - |
      echo "Your commits:"
      curl -s -H "Authorization: Bearer ${GITHUB_TOKEN}" \
           "https://api.github.com/repos/mklemmingen/LogChirpy/commits?author=104225647%2Bmklemmingen@users.noreply.github.com&per_page=3" \
           | grep -E '"sha"|"date"' | head -6
    
    - echo "‚úÖ Attribution verification complete"
    - echo "üìä Check your GitHub profile contribution graph in 24 hours"
  dependencies:
    - migrate-to-github
  allow_failure: true

# Quick TypeScript check (improved)
typescript-check:
  stage: verify
  image: node:18-alpine
  timeout: 15m
  cache:
    key: npm-cache
    paths:
      - node_modules/
      - .npm/
  before_script:
    - apk add --no-cache git
    - git clone --depth 1 https://x-access-token:${GITHUB_TOKEN}@github.com/mklemmingen/LogChirpy.git ./project
    - cd ./project
    - npm ci --cache .npm --prefer-offline
  script:
    - echo "=== TypeScript Check ==="
    - npx tsc --noEmit --pretty || echo "TypeScript issues found"
    - echo "=== Check complete ==="
  dependencies:
    - migrate-to-github
  allow_failure: true
  parallel: 
    matrix:
      - NODE_VERSION: ["18"]
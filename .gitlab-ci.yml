variables:
  GIT_DEPTH: 0  # ensure full clone from GitLab

stages:
  - deploy

deploy-logchirpy:
  stage: deploy
  script:
    - echo "üß® Nuking GitHub history, keeping only commits after 2025-04-12..."
    - git config --global user.email "mklemmingen@users.noreply.github.com"
    - git config --global user.name "mklemmingen"

    # Ensure working with GitLab clone
    - git checkout -B main

    # Find first commit after cutoff date
    - export KEEP_COMMIT=$(git rev-list --reverse --since="2025-04-12T23:59:59" main | head -n 1)
    - if [ -z "$KEEP_COMMIT" ]; then echo "‚ùå No commits after 2025-04-12 found. Aborting."; exit 1; fi

    # Rewrite history to remove earlier commits
    - git rebase --root --onto "$KEEP_COMMIT"^

    # Sanitize emails after filtering
    - echo "‚úâÔ∏è Rewriting emails from student to GitHub..."
    - git filter-branch --env-filter '
        OLD_EMAIL="martin.lauterbach@student.reutlingen-university.de"
        CORRECT_NAME="mklemmingen"
        CORRECT_EMAIL="mklemmingen@users.noreply.github.com"
        if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]; then
          export GIT_COMMITTER_NAME="$CORRECT_NAME"
          export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"
        fi
        if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]; then
          export GIT_AUTHOR_NAME="$CORRECT_NAME"
          export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL"
        fi
      ' --tag-name-filter cat -- --branches --tags

    # Overwrite GitHub main with filtered history
    - git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/mklemmingen/LogChirpy.git
    - git push --force origin main
    - echo "‚úÖ GitHub main branch successfully overwritten with clean and sanitized history."
  only:
    - main
  environment: production
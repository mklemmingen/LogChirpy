variables:
  GIT_DEPTH: 0

stages:
  - deploy

deploy-logchirpy:
  stage: deploy
  script:
  - echo "üß® Rewriting Git history to remove commit 6dc08e15..."
  - git config --global user.email "mklemmingen@users.noreply.github.com"
  - git config --global user.name "mklemmingen"
  - git checkout -B main

  # Remove the specific commit
  - git filter-branch --commit-filter '
      if [ "$GIT_COMMIT" = "6dc08e153ae7aa2670a085104a1dbb95dd64254c" ]; then
        skip_commit "$@";
      else
        git commit-tree "$@";
      fi
    ' -- --all

  # Sanitize author/committer email (force to avoid backup error)
  - echo "‚úâÔ∏è Rewriting emails from student to GitHub..."
  - git filter-branch -f --env-filter '
      OLD_EMAIL="martin.lauterbach@student.reutlingen-university.de"
      CORRECT_NAME="mklemmingen"
      CORRECT_EMAIL="mklemmingen@users.noreply.github.com"
      if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]; then
        export GIT_COMMITTER_NAME="$CORRECT_NAME"
        export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"
      fi
      if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]; then
        export GIT_AUTHOR_NAME="$CORRECT_NAME"
        export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL"
      fi
    ' --tag-name-filter cat -- --branches --tags

  - git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/mklemmingen/LogChirpy.git
  - git push --force origin main
  - echo "‚úÖ GitHub main branch successfully overwritten with clean and sanitized history."
  only:
    - main
  environment: production
